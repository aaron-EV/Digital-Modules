// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.0 Build 156 04/24/2013 SJ Web Edition"

// DATE "07/23/2021 21:39:21"

// 
// Device: Altera EP4CGX15BF14C6 Package FBGA169
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module decoder2to4 (
	in,
	en,
	out);
input 	[1:0] in;
input 	en;
output 	[3:0] out;

// Design Ports Information
// out[0]	=>  Location: PIN_M6,	 I/O Standard: 2.5 V,	 Current Strength: Default
// out[1]	=>  Location: PIN_M4,	 I/O Standard: 2.5 V,	 Current Strength: Default
// out[2]	=>  Location: PIN_N6,	 I/O Standard: 2.5 V,	 Current Strength: Default
// out[3]	=>  Location: PIN_N4,	 I/O Standard: 2.5 V,	 Current Strength: Default
// en	=>  Location: PIN_L4,	 I/O Standard: 2.5 V,	 Current Strength: Default
// in[1]	=>  Location: PIN_A8,	 I/O Standard: 2.5 V,	 Current Strength: Default
// in[0]	=>  Location: PIN_A7,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("digitalCircuits_min_1200mv_0c_v_fast.sdo");
// synopsys translate_on

wire \out[0]~output_o ;
wire \out[1]~output_o ;
wire \out[2]~output_o ;
wire \out[3]~output_o ;
wire \en~input_o ;
wire \in[0]~input_o ;
wire \in[1]~input_o ;
wire \out~0_combout ;
wire \out~1_combout ;
wire \out~2_combout ;
wire \out~3_combout ;


// Location: IOOBUF_X12_Y0_N9
cycloneiv_io_obuf \out[0]~output (
	.i(\out~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \out[0]~output .bus_hold = "false";
defparam \out[0]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X8_Y0_N2
cycloneiv_io_obuf \out[1]~output (
	.i(\out~1_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \out[1]~output .bus_hold = "false";
defparam \out[1]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X12_Y0_N2
cycloneiv_io_obuf \out[2]~output (
	.i(\out~2_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \out[2]~output .bus_hold = "false";
defparam \out[2]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X10_Y0_N9
cycloneiv_io_obuf \out[3]~output (
	.i(\out~3_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \out[3]~output .bus_hold = "false";
defparam \out[3]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X8_Y0_N8
cycloneiv_io_ibuf \en~input (
	.i(en),
	.ibar(gnd),
	.o(\en~input_o ));
// synopsys translate_off
defparam \en~input .bus_hold = "false";
defparam \en~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X12_Y31_N1
cycloneiv_io_ibuf \in[0]~input (
	.i(in[0]),
	.ibar(gnd),
	.o(\in[0]~input_o ));
// synopsys translate_off
defparam \in[0]~input .bus_hold = "false";
defparam \in[0]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X12_Y31_N8
cycloneiv_io_ibuf \in[1]~input (
	.i(in[1]),
	.ibar(gnd),
	.o(\in[1]~input_o ));
// synopsys translate_off
defparam \in[1]~input .bus_hold = "false";
defparam \in[1]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X12_Y1_N16
cycloneiv_lcell_comb \out~0 (
// Equation(s):
// \out~0_combout  = (\en~input_o  & (!\in[0]~input_o  & !\in[1]~input_o ))

	.dataa(gnd),
	.datab(\en~input_o ),
	.datac(\in[0]~input_o ),
	.datad(\in[1]~input_o ),
	.cin(gnd),
	.combout(\out~0_combout ),
	.cout());
// synopsys translate_off
defparam \out~0 .lut_mask = 16'h000C;
defparam \out~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X12_Y1_N2
cycloneiv_lcell_comb \out~1 (
// Equation(s):
// \out~1_combout  = (\en~input_o  & (\in[0]~input_o  & !\in[1]~input_o ))

	.dataa(gnd),
	.datab(\en~input_o ),
	.datac(\in[0]~input_o ),
	.datad(\in[1]~input_o ),
	.cin(gnd),
	.combout(\out~1_combout ),
	.cout());
// synopsys translate_off
defparam \out~1 .lut_mask = 16'h00C0;
defparam \out~1 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X12_Y1_N28
cycloneiv_lcell_comb \out~2 (
// Equation(s):
// \out~2_combout  = (\en~input_o  & (!\in[0]~input_o  & \in[1]~input_o ))

	.dataa(gnd),
	.datab(\en~input_o ),
	.datac(\in[0]~input_o ),
	.datad(\in[1]~input_o ),
	.cin(gnd),
	.combout(\out~2_combout ),
	.cout());
// synopsys translate_off
defparam \out~2 .lut_mask = 16'h0C00;
defparam \out~2 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X12_Y1_N30
cycloneiv_lcell_comb \out~3 (
// Equation(s):
// \out~3_combout  = (\en~input_o  & (\in[0]~input_o  & \in[1]~input_o ))

	.dataa(gnd),
	.datab(\en~input_o ),
	.datac(\in[0]~input_o ),
	.datad(\in[1]~input_o ),
	.cin(gnd),
	.combout(\out~3_combout ),
	.cout());
// synopsys translate_off
defparam \out~3 .lut_mask = 16'hC000;
defparam \out~3 .sum_lutc_input = "datac";
// synopsys translate_on

assign out[0] = \out[0]~output_o ;

assign out[1] = \out[1]~output_o ;

assign out[2] = \out[2]~output_o ;

assign out[3] = \out[3]~output_o ;

endmodule
