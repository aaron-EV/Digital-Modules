// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/14/2021 21:12:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    swapper
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module swapper_vlg_sample_tst(
	a,
	b,
	clk,
	rst,
	sampler_tx
);
input [7:0] a;
input [7:0] b;
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module swapper_vlg_check_tst (
	largest,
	smallest,
	sampler_rx
);
input [7:0] largest;
input [7:0] smallest;
input sampler_rx;

reg [7:0] largest_expected;
reg [7:0] smallest_expected;

reg [7:0] largest_prev;
reg [7:0] smallest_prev;

reg [7:0] largest_expected_prev;
reg [7:0] smallest_expected_prev;

reg [7:0] last_largest_exp;
reg [7:0] last_smallest_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	largest_prev = largest;
	smallest_prev = smallest;
end

// update expected /o prevs

always @(trigger)
begin
	largest_expected_prev = largest_expected;
	smallest_expected_prev = smallest_expected;
end


// expected largest[ 7 ]
initial
begin
	largest_expected[7] = 1'bX;
end 
// expected largest[ 6 ]
initial
begin
	largest_expected[6] = 1'bX;
end 
// expected largest[ 5 ]
initial
begin
	largest_expected[5] = 1'bX;
end 
// expected largest[ 4 ]
initial
begin
	largest_expected[4] = 1'bX;
end 
// expected largest[ 3 ]
initial
begin
	largest_expected[3] = 1'bX;
end 
// expected largest[ 2 ]
initial
begin
	largest_expected[2] = 1'bX;
end 
// expected largest[ 1 ]
initial
begin
	largest_expected[1] = 1'bX;
end 
// expected largest[ 0 ]
initial
begin
	largest_expected[0] = 1'bX;
end 
// expected smallest[ 7 ]
initial
begin
	smallest_expected[7] = 1'bX;
end 
// expected smallest[ 6 ]
initial
begin
	smallest_expected[6] = 1'bX;
end 
// expected smallest[ 5 ]
initial
begin
	smallest_expected[5] = 1'bX;
end 
// expected smallest[ 4 ]
initial
begin
	smallest_expected[4] = 1'bX;
end 
// expected smallest[ 3 ]
initial
begin
	smallest_expected[3] = 1'bX;
end 
// expected smallest[ 2 ]
initial
begin
	smallest_expected[2] = 1'bX;
end 
// expected smallest[ 1 ]
initial
begin
	smallest_expected[1] = 1'bX;
end 
// expected smallest[ 0 ]
initial
begin
	smallest_expected[0] = 1'bX;
end 
// generate trigger
always @(largest_expected or largest or smallest_expected or smallest)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected largest = %b | expected smallest = %b | ",largest_expected_prev,smallest_expected_prev);
	$display("| real largest = %b | real smallest = %b | ",largest_prev,smallest_prev);
`endif
	if (
		( largest_expected_prev[0] !== 1'bx ) && ( largest_prev[0] !== largest_expected_prev[0] )
		&& ((largest_expected_prev[0] !== last_largest_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port largest[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", largest_expected_prev);
		$display ("     Real value = %b", largest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_largest_exp[0] = largest_expected_prev[0];
	end
	if (
		( largest_expected_prev[1] !== 1'bx ) && ( largest_prev[1] !== largest_expected_prev[1] )
		&& ((largest_expected_prev[1] !== last_largest_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port largest[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", largest_expected_prev);
		$display ("     Real value = %b", largest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_largest_exp[1] = largest_expected_prev[1];
	end
	if (
		( largest_expected_prev[2] !== 1'bx ) && ( largest_prev[2] !== largest_expected_prev[2] )
		&& ((largest_expected_prev[2] !== last_largest_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port largest[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", largest_expected_prev);
		$display ("     Real value = %b", largest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_largest_exp[2] = largest_expected_prev[2];
	end
	if (
		( largest_expected_prev[3] !== 1'bx ) && ( largest_prev[3] !== largest_expected_prev[3] )
		&& ((largest_expected_prev[3] !== last_largest_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port largest[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", largest_expected_prev);
		$display ("     Real value = %b", largest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_largest_exp[3] = largest_expected_prev[3];
	end
	if (
		( largest_expected_prev[4] !== 1'bx ) && ( largest_prev[4] !== largest_expected_prev[4] )
		&& ((largest_expected_prev[4] !== last_largest_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port largest[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", largest_expected_prev);
		$display ("     Real value = %b", largest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_largest_exp[4] = largest_expected_prev[4];
	end
	if (
		( largest_expected_prev[5] !== 1'bx ) && ( largest_prev[5] !== largest_expected_prev[5] )
		&& ((largest_expected_prev[5] !== last_largest_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port largest[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", largest_expected_prev);
		$display ("     Real value = %b", largest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_largest_exp[5] = largest_expected_prev[5];
	end
	if (
		( largest_expected_prev[6] !== 1'bx ) && ( largest_prev[6] !== largest_expected_prev[6] )
		&& ((largest_expected_prev[6] !== last_largest_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port largest[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", largest_expected_prev);
		$display ("     Real value = %b", largest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_largest_exp[6] = largest_expected_prev[6];
	end
	if (
		( largest_expected_prev[7] !== 1'bx ) && ( largest_prev[7] !== largest_expected_prev[7] )
		&& ((largest_expected_prev[7] !== last_largest_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port largest[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", largest_expected_prev);
		$display ("     Real value = %b", largest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_largest_exp[7] = largest_expected_prev[7];
	end
	if (
		( smallest_expected_prev[0] !== 1'bx ) && ( smallest_prev[0] !== smallest_expected_prev[0] )
		&& ((smallest_expected_prev[0] !== last_smallest_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallest[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallest_expected_prev);
		$display ("     Real value = %b", smallest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_smallest_exp[0] = smallest_expected_prev[0];
	end
	if (
		( smallest_expected_prev[1] !== 1'bx ) && ( smallest_prev[1] !== smallest_expected_prev[1] )
		&& ((smallest_expected_prev[1] !== last_smallest_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallest[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallest_expected_prev);
		$display ("     Real value = %b", smallest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_smallest_exp[1] = smallest_expected_prev[1];
	end
	if (
		( smallest_expected_prev[2] !== 1'bx ) && ( smallest_prev[2] !== smallest_expected_prev[2] )
		&& ((smallest_expected_prev[2] !== last_smallest_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallest[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallest_expected_prev);
		$display ("     Real value = %b", smallest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_smallest_exp[2] = smallest_expected_prev[2];
	end
	if (
		( smallest_expected_prev[3] !== 1'bx ) && ( smallest_prev[3] !== smallest_expected_prev[3] )
		&& ((smallest_expected_prev[3] !== last_smallest_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallest[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallest_expected_prev);
		$display ("     Real value = %b", smallest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_smallest_exp[3] = smallest_expected_prev[3];
	end
	if (
		( smallest_expected_prev[4] !== 1'bx ) && ( smallest_prev[4] !== smallest_expected_prev[4] )
		&& ((smallest_expected_prev[4] !== last_smallest_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallest[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallest_expected_prev);
		$display ("     Real value = %b", smallest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_smallest_exp[4] = smallest_expected_prev[4];
	end
	if (
		( smallest_expected_prev[5] !== 1'bx ) && ( smallest_prev[5] !== smallest_expected_prev[5] )
		&& ((smallest_expected_prev[5] !== last_smallest_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallest[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallest_expected_prev);
		$display ("     Real value = %b", smallest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_smallest_exp[5] = smallest_expected_prev[5];
	end
	if (
		( smallest_expected_prev[6] !== 1'bx ) && ( smallest_prev[6] !== smallest_expected_prev[6] )
		&& ((smallest_expected_prev[6] !== last_smallest_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallest[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallest_expected_prev);
		$display ("     Real value = %b", smallest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_smallest_exp[6] = smallest_expected_prev[6];
	end
	if (
		( smallest_expected_prev[7] !== 1'bx ) && ( smallest_prev[7] !== smallest_expected_prev[7] )
		&& ((smallest_expected_prev[7] !== last_smallest_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallest[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallest_expected_prev);
		$display ("     Real value = %b", smallest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_smallest_exp[7] = smallest_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module swapper_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] a;
reg [7:0] b;
reg clk;
reg rst;
// wires                                               
wire [7:0] largest;
wire [7:0] smallest;

wire sampler;                             

// assign statements (if any)                          
swapper i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.clk(clk),
	.largest(largest),
	.rst(rst),
	.smallest(smallest)
);
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
	a[5] = #190000 1'b1;
	a[5] = #160000 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
	a[4] = #270000 1'b1;
	a[4] = #80000 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #80000 1'b1;
	a[3] = #270000 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
	a[2] = #270000 1'b1;
	a[2] = #80000 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
	a[1] = #80000 1'b1;
	a[1] = #110000 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b0;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b0;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b0;
	b[5] = #270000 1'b1;
	b[5] = #80000 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b0;
	b[4] = #130000 1'b1;
	b[4] = #220000 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
	b[3] = #190000 1'b1;
	b[3] = #160000 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
	b[2] = #130000 1'b1;
	b[2] = #220000 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
	b[1] = #190000 1'b1;
	b[1] = #80000 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #30000 1'b0;
	rst = #20000 1'b1;
	rst = #880000 1'b0;
end 

swapper_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

swapper_vlg_check_tst tb_out(
	.largest(largest),
	.smallest(smallest),
	.sampler_rx(sampler)
);
endmodule

