// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/02/2021 23:37:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    singlePort_ramRA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module singlePort_ramRA_vlg_sample_tst(
	addr,
	clk,
	din,
	we,
	sampler_tx
);
input [7:0] addr;
input  clk;
input [0:0] din;
input  we;
output sampler_tx;

reg sample;
time current_time;
always @(addr or clk or din or we)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module singlePort_ramRA_vlg_check_tst (
	dout,
	sampler_rx
);
input [0:0] dout;
input sampler_rx;

reg [0:0] dout_expected;

reg [0:0] dout_prev;

reg [0:0] dout_expected_prev;

reg [0:0] last_dout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	dout_prev = dout;
end

// update expected /o prevs

always @(trigger)
begin
	dout_expected_prev = dout_expected;
end



// expected dout[0]
initial
begin
	dout_expected[0] = 1'bX;
end 
// generate trigger
always @(dout_expected or dout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dout = %b | ",dout_expected_prev);
	$display("| real dout = %b | ",dout_prev);
`endif
	if (
		( dout_expected_prev !== 1'bx ) && ( dout_prev !== dout_expected_prev )
		&& ((dout_expected_prev !== last_dout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dout_expected_prev);
		$display ("     Real value = %b", dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dout_exp = dout_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module singlePort_ramRA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] addr;
reg clk;
reg [0:0] din;
reg we;
// wires                                               
wire [0:0] dout;

wire sampler;                             

// assign statements (if any)                          
singlePort_ramRA i1 (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.clk(clk),
	.din(din),
	.dout(dout),
	.we(we)
);
// addr[ 7 ]
initial
begin
	addr[7] = 1'b0;
end 
// addr[ 6 ]
initial
begin
	addr[6] = 1'b0;
end 
// addr[ 5 ]
initial
begin
	addr[5] = 1'b0;
end 
// addr[ 4 ]
initial
begin
	addr[4] = 1'b0;
end 
// addr[ 3 ]
initial
begin
	addr[3] = 1'b0;
end 
// addr[ 2 ]
initial
begin
	addr[2] = 1'b0;
end 
// addr[ 1 ]
initial
begin
	addr[1] = 1'b0;
end 
// addr[ 0 ]
initial
begin
	addr[0] = 1'b0;
	addr[0] = #120000 1'b1;
	addr[0] = #40000 1'b0;
	addr[0] = #80000 1'b1;
	addr[0] = #30000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// din
initial
begin
	din[0] = 1'b0;
end 

// din[0]
initial
begin
	din[0] = 1'b0;
	din[0] = #130000 1'b1;
	din[0] = #20000 1'b0;
end 

// we
initial
begin
	we = 1'b0;
	we = #110000 1'b0;
	we = #20000 1'b1;
	we = #20000 1'b0;
	we = #50000 1'b0;
	we = #30000 1'b0;
	we = #70000 1'b0;
end 

singlePort_ramRA_vlg_sample_tst tb_sample (
	.addr(addr),
	.clk(clk),
	.din(din),
	.we(we),
	.sampler_tx(sampler)
);

singlePort_ramRA_vlg_check_tst tb_out(
	.dout(dout),
	.sampler_rx(sampler)
);
endmodule

